---
name: Server Config
description: |-
  While the NATS server has many flags that allow for simple testing of features, the NATS server products provide a flexible configuration format that combines the best of traditional formats and newer styles such as JSON and YAML.

  The NATS configuration file supports the following syntax:

  * Lines can be commented with `#` and `//`
  * Values can be assigned to properties with:
    * Equals sign: `foo = 2`
    * Colon: `foo: 2`
    * Whitespace: `foo 2`
  * Arrays are enclosed in brackets: `["a", "b", "c"]`
  * Maps are enclosed in braces: `{foo: 2}`
  * Maps can be assigned with no key separator
  * Semicolons can be used as terminators

  The NATS configuration file is parsed with UTF-8 encoding.

  #### Note

  The NATS configuration in the file can also be rendered as a JSON object (with comments!), but to combine it with variables the variables still have to be unquoted.

  ## Strings and Numbers

  The configuration parser is very forgiving, as you have seen:

  * values can be a primitive, or a list, or a map
  * strings and numbers typically do the right thing
  * numbers support units such as, 1K for 1000, 1KB for 1024

  String values that start with a digit _can_ create issues. To force such values as strings, quote them.

  _BAD Config_:

  ```text
  listen: 127.0.0.1:4222
  authorization: {
      # BAD!
      token: 3secret
  }
  ```

  Fixed Config:

  ```text
  listen: 127.0.0.1:4222
  authorization: {
      token: "3secret"
  }
  ```

  ## Variables

  Server configurations can specify variables. Variables allow you to reference a value from one or more sections in the configuration

  Variables:

  * Are block-scoped
  * Are referenced with a `$` prefix. They have to be unquoted when being referenced, for example an assigment like `foo = "$example"` will result in `foo` being the literal string `"$example"`.
  * Can be resolved from environment variables having the same name

  > If the environment variable value begins with a number you may have trouble resolving it depending on the server version you are running.

  ```text
  # Define a variable in the config
  TOKEN: "secret"

  # Reference the variable
  authorization {
      token: $TOKEN
  }
  ```

  A similar configuration, but this time, the value is in the environment:

  ```text
  # TOKEN is defined in the environment
  authorization {
      token: $TOKEN
  }
  ```

  export TOKEN="hello"; nats-server -c /config/file

  ## Include Directive

  The `include` directive allows you to split a server configuration into several files. This is useful for separating configuration into chunks that you can easily reuse between different servers.

  Includes _must_ use relative paths, and are relative to the main configuration \(the one specified via the `-c` option\):

  server.conf:

  ```text
  listen: 127.0.0.1:4222
  include ./auth.conf
  ```

  > Note that `include` is not followed by `=` or `:`, as it is a _directive_.

  auth.conf:

  ```text
  authorization: {
      token: "f0oBar"
  }
  ```

  ```text
  > nats-server -c server.conf
  ```

sections:
  - name: Connectivity
    properties:
      host:
        type: host
        default: 0.0.0.0
        description: |-
          Host for client connections.

      port:
        type: integer
        description: |-
          Port for client connections. Use `-1` for a
          random available port.
        default: 4222

      listen:
        type: listen
        description: |-
          `<host>:<port>` for a client connections.

      client_advertise:
        type: string
        description: |-
          Advertised client `<host>:<port>`. Useful for cluster setups
          behind a NAT.

      tls:
        type: tls
        description: |-
          TLS configuration for client and HTTP monitoring.

      allow_non_tls:
        type: boolean
        description: |-
          Allow mixed TLS and non-TLS on the same port.

      ocsp:
        type: ocsp

      mqtt:
        type: mqtt
        description: |-
          Configuration for enabling the MQTT interface.

      websocket:
        type: websocket
        description: |-
          Configuration for enabling the WebSocket interface.
        aliases:
          - ws

  - name: Centralized Auth
    properties:
      authorization:
        type: authorization
        description: |-
          Static single or multi-user declaration.

      accounts:
        type: accounts
        description: |-
          Static set of accounts.

      no_auth_user:
        type: string
        description: |-
          Name of the user that non-authenticated clients
          will inherit the authorization controls of. This must be a user
          defined in either the `authorization` or `accounts` block.

  - name: Decentralized Auth
    properties:
      operator:
        types:
          - string
          - array(string)
        aliases:
          - operators
          - root
          - roots
          - root_operator
          - root_operators
        description: |-
          One or more operator JWTs, either in files or inlined.

      trusted_keys:
        type: array(string)
        description: |-
          One or more operator public keys to trust.

      resolver:
        type: resolver
        aliases:
          - account_resolver
          - account_resolvers
        description: |-
          Takes takes precedence over the value obtained from
          the `operator` if defined.

      resolver_tls:
        type: tls
        description: |-

      resolver_preload:
        type: map(string)
        description: |-
          Map of account public key to the account JWT.

      resolver_pinned_accounts:
        types:
          - string
          - array(string)

      system_account:
        type: string
        default: "$SYS"
        description: |-
          Name or public key of the account that will be deemed the
          *system* account.
        aliases:
          - system

      no_system_account:
        type: boolean
        description: |-
        aliases:
          - no_system
          - no_sys_acc

  - name: Clustering
    properties:
      cluster:
        type: cluster
        description: |-
          Configuration for clustering a set of servers.

      gateway:
        type: gateways
        description: |-
          Configuration for setting up gateway connections
          between clusters.

  - name: Leafnodes
    properties:
      leafnodes:
        type: leafnode
        description: Configuration for setting up leaf node connections.
        aliases:
          - leaf

  - name: JetStream
    properties:
      jetstream:
        types:
          - boolean
          - enable-disable
          - jetstream
        default: false
  - name: Subject Mapping
    properties:
      mappings:
        type: mappings
        aliases:
          - maps

  - name: Logging
    properties:
      debug:
        type: boolean
        default: false
        description: |-
          If true, enables debug log messages.

      trace:
        type: boolean
        default: false
        description: |-
          If true, enables protocol trace log messages,
          excluding the system account.

      trace_verbose:
        type: boolean
        default: false
        description: |-
          If true, enables protocol trace log messages,
          including the system account.

      logtime:
        type: string
        default: true
        description: |-
          If false, log without timestamps.

      logtime_utc:
        type: string
        default: false
        description: |-
          If true, log timestamps with be in UTC rather than the local timezone.

      logfile:
        type: string
        description: |-
          Log file name.
        aliases:
          - log_file

      logfile_size_limit:
        type: integer
        default: 0
        description: |-
          Size in bytes after the log file rolls over to a new one.
        aliases:
          - log_size_limit

      syslog:
        type: boolean
        default: false
        description: |-
          Log to syslog.

      remote_syslog:
        type: string
        description: |-
          Remote syslog address.

  - name: Monitoring and Tracing
    properties:
      server_name:
        type: string
        description: |-
          The servers name, shows up in logging. Defaults to the generated
          server ID. When JetStream is used, within a domain, all server
          names need to be unique.
        examples:
          - value: gcp-us-west1-3

      server_tags:
        types:
          - string
          - array(string)
        description: |-
          One or more tags associated with the server. This is currently
          used for placement of JetStream streams and consumers.
        examples:
          - value: "cloud:aws"
          - value: "[region:us-west, az:1b]"

      http:
        type: listen
        description: |-
          Listen specification `<host>:<port>` for server monitoring.

      https:
        type: listen
        description: |-
          Listen specification `<host>:<port>` for TLS server monitoring.

      http_port:
        type: integer
        aliases:
          - monitor_port
        description: |-
          HTTP port for server monitoring.

      https_port:
        type: integer
        description: |-
          HTTPS port for server monitoring.

      http_base_path:
        type: string
        description: |-
          Base path for monitoring endpoints.

      connect_error_reports:
        type: integer
        default: 3600
        description: |-
          Number of attempts at which a repeated failed route, gateway
          or leaf node connection is reported. Connect attempts are made
          once every second.

      reconnect_error_reports:
        type: integer
        default: 1
        description: |-
          Number of failed attempt to reconnect a route, gateway or
          leaf node connection. Default is to report every attempt.

      max_traced_msg_len:
        type: integer
        description: |-
          Set a limit to the trace of the payload of a message.
        default: 0

  - name: Runtime Configuration
    properties:
      max_control_line:
        type: string
        default: 4KB
        description: |-
          Maximum length of a protocol line (including combined length of subject and queue group). Increasing this value may require client changes to be used. Applies to all traffic.

      max_connections:
        type: string
        default: 64K
        aliases:
          - max_conns
        description: |-
          Maximum number of active client connections.

      max_payload:
        type: string
        default: 1MB
        description: |-
          Maximum number of bytes in a message payload. Reducing this size may force you to implement chunking in your clients. Applies to client and leafnode payloads. It is not recommended to use values over 8MB but `max_payload` can be set up to 64MB. The max payload must be equal or smaller to the `max_pending` value.

      max_pending:
        type: string
        default: 64MB
        description: |-
          Maximum number of bytes buffered for a connection Applies to client connections. Note that applications can also set `PendingLimits` (number of messages and total size) for their subscriptions.

      max_subscriptions:
        type: string
        default: 0
        aliases:
          - max_subs
        description: |-
          Maximum numbers of subscriptions per client and leafnode accounts connection. A value of `0` means unlimited.

      max_subscription_tokens:
        type: integer
        aliases:
          - max_sub_tokens

      ping_interval:
        type: string
        default: 2m
        description: |-
          Duration at which pings are sent to clients, leaf nodes and routes.
          In the presence of client traffic, such as messages or client side
          pings, the server will not send pings. Therefore it is recommended
          to keep this value bigger than what clients use.

      ping_max:
        type: integer
        default: 2
        description: |-
          After how many unanswered pings the server will allow before closing
          the connection.

      write_deadline:
        type: duration
        default: 10s
        description: |-
          Maximum number of seconds the server will block when writing. Once
          this threshold is exceeded the connection will be closed. See slow
          consumer on how to deal with this on the client.

      no_header_support:
        type: boolean
        description: |-
          Disables support for message headers.

      disable_sublist_cache:
        type: boolean
        default: false
        description: |-
          If true, disable subscription caches for all accounts. This saves
          resources in situations where different subjects are used
          all the time.
        aliases:
          - no_sublist_cache

      lame_duck_duration:
        type: duration
        default: 2m
        description: |-
          Must be at least 30s.

      lame_duck_grace_period:
        type: duration
        default: 10s
        description: |-
          This is the duration the server waits, after entering
          lame duck mode, before starting to close client connections

      pidfile:
        type: string
        aliases:
          - pid_file

      ports_file_dir:
        type: string

      prof_port:
        type: integer

      default_js_domain:
        type: map(string)
        description: |-
          Account to domain name mapping.
