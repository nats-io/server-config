types:
  websocket:
    type: object
    version: 2.2
    description: |-
      If configured, the NATS server will support clients that implement
      the NATS protocol over the WebSocket transport.
    aliases:
      - ws

    properties:
      host:
        type: host
        default: 0.0.0.0

      port:
        type: integer
        default: 443
        description: |-
          By default, a WebSocket-enabled server requires TLS and binds to port 443.

      listen:
        type: listen

      advertise:
        type: listen
        description: |-
          Advertised client `<host>:<port>`. Useful for cluster setups
          behind a NAT.

      tls:
        type: tls
        description: |-

      no_tls:
        type: boolean
        description: |-

      same_origin:
        type: boolean
        default: false
        description: |-
          This option is relevant for clients used within a Web Browser, such
          as [nats.ws][nats.ws].

          When set to `true`, the HTTP `Origin` header must match the requestâ€™s
          hostname. Refer to [cross-origin resource sharing][cors] documentation
          for more details.

          [nats.ws]: https://github.com/nats-io/nats.ws
          [cors]: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

      allowed_origins:
        type: array(string)
        aliases:
          - allowed_origin
          - allow_origins
          - allow_origin
          - origins
          - origin
        description: |-
          The list of accepted origins. When empty, and `same_origin` is `false`,
          clients from any origin are allowed to connect.

          This list specifies the only accepted values for the client's request
          `Origin` header. The scheme, host, and port must match. By convention,
          the absence of TCP port in the URL will be port 80 for an
          "http://" scheme, and 443 for "https://".

      handshake_timeout:
        type: duration
        description: |-
          This is the total time allowed for the server to
          read the client request and write the response back
          to the client. This includes the time needed for the
          TLS handshake.

      compress:
        type: boolean
        aliases:
          - compression
        description: |-
          This enables support for compressed websocket frames
          in the server. For compression to be used, both server
          and client have to support it.

      authorization:
        type: simple-authorization

      jwt_token:
        type: string
        description: |-
          Name of the HTTP cookie, that, if present, will be used as a client JWT.
          The cookie should be set by the HTTP server as described [here][cookie].
          This setting is useful when generating NATS `Bearer` client JWTs as the
          result of some authentication mechanism. The HTTP server after correct
          authentication can issue a JWT for the user, that is set securely
          preventing access by unintended scripts. Note these JWTs must be
          [NATS JWTs][jwt].

          **Note:** If the client specifies a JWT in the `CONNECT` protocol,
          this option is ignored.

          [cookie]: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies
          [jwt]: https://docs.nats.io/nats-server/configuration/securing_nats/jwt

      no_auth_user:
        type: string
        description: |-
          If no user name is provided when an MQTT client connects, will default
          this user name in the authentication phase. If specified, this will
          override, for MQTT clients, any `no_auth_user` value defined in the
          main configuration file.
          *Note: that this is not compatible with running the server in
          operator mode.*

    examples:
      - label: No-TLS for development
        description: |-
          This is the simplest way to get started during development.

        value: |-
          websocket {
            port: 8080
            no_tls: true
          }

      - label: No-TLS with fontend Web proxy
        description: |-
          If a frontend Web proxy is being used that performs TLS termination,
          TLS can be disabled for the WebSocket transport combined with the
          `advertise` to ensure clients get the proper endpoint.

        value: |-
          websocket {
            port: 8080
            no_tls: true
            advertise: nats.example.org
          }
